#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
plot(cbind(xIn,residual))
plot(x,y, pch=".")
lines(cbind(xIn,ensembleGB))
iTrees
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
#Begin Iteration
iTrees <- iTrees + 1
df <- as.data.frame(cbind(xIn,residual))
dimnames(df)[[2]] <- c("x","y")
treeGB <- rpart(y~x,data=df,control = rcontrol)
ensembleGB <- ensembleGB + eps*predict(treeGB,xIn)
residual <- y - ensembleGB
#end Iteration
iTres
iTrees
plot(cbind(xIn,residual))
plot(x,y, pch=".")
lines(cbind(xIn,ensembleGB))
#Try these on the concrete data set that we looked at last class
#let's try this with
require(gbm)
concreteData <- read.table(file="C:\\Documents and Settings\\Administrator\\My Documents\\Downloads\\Concrete_Data-1.csv",
header=TRUE,sep=",")
str(concreteData)
concreteModel <- gbm(strength~.,
distribution="gaussian",
data=concreteData,
n.trees = 3000,
interaction.depth=3,
cv.folds=10,
shrinkage=.003)
require(gbm)
concreteModel <- gbm(strength~.,
distribution="gaussian",
data=concreteData,
n.trees = 3000,
interaction.depth=3,
cv.folds=10,
shrinkage=.003)
require(gbm)
install.packages("gbm")
require(gbm)
concreteModel <- gbm(strength~.,
distribution="gaussian",
data=concreteData,
n.trees = 3000,
interaction.depth=3,
cv.folds=10,
shrinkage=.003)
gbm.perf(concreteModel,method="cv")
min(sqrt(concreteModel$cv.error))
rm(list=ls())
require(randomForest)
require(rpart)
setwd("C:\\Documents and Settings\\Administrator\\My Documents\\MLClasses\\revoClasses\\Ensemble\\revoEnsembleCourseMatl\\data")
#To demo Random Forest we'll need a multidimensional problem
concreteData <- read.table(file="Concrete_Data.csv", header=TRUE, sep=",")
ensembleRF <- rep(0.0,nrow(concreteData))
nFrac <- 0.5
nSamp <- as.integer(nFrac*(ncol(concreteData)-1))
iTrees <- 0
rcontrol <- rpart.control(minsplit=10, cp=0.00,
maxdepth=3)
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
iTrees
residual <- concreteData$compressiveStrength - ensembleRF/iTrees
mean(abs(residual))
plot(residual)
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
iTrees
iTrees
residual <- concreteData$compressiveStrength - ensembleRF/iTrees
plot(residual)
mean(abs(residual))
rcontrol <- rpart.control(minsplit=3, cp=0.00,
maxdepth=6)
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
#Begin iteration
iTrees <- iTrees + 1
idx <- sample(1:(ncol(concreteData)-1),nSamp)
idx2 <- c(idx,ncol(concreteData))
dfTemp <- concreteData[,idx2]
treeRF <- rpart(compressiveStrength~.,data=dfTemp,control = rcontrol)
xIn <- concreteData[,idx]
ensembleRF <- ensembleRF + predict(treeRF,xIn)
#End iteration
iTrees
residual <- concreteData$compressiveStrength - ensembleRF/iTrees
plot(residual)
mean(abs(residual))
#Random Forest Package - Random Forest 2.
#From Package Documentation
iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE,
proximity=TRUE)
print(iris.rf)
## Look at variable importance:
round(importance(iris.rf), 2)
iris.mds <- cmdscale(1 - iris.rf$proximity, eig=TRUE)
op <- par(pty="s")
pairs(cbind(iris[,1:4], iris.mds$points), cex=0.6, gap=0,
col=c("red", "green", "blue")[as.numeric(iris$Species)],
main="Iris Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(iris.mds$GOF)
?cmdscale
set.seed(17)
iris.urf <- randomForest(iris[, -5])
MDSplot(iris.urf, iris$Species)
print(iris.mds$GOF)
install.packages("RColorBrewer")
set.seed(17)
iris.urf <- randomForest(iris[, -5])
MDSplot(iris.urf, iris$Species)
set.seed(131)
ozone.rf <- randomForest(Ozone ~ ., data=airquality, mtry=4,
importance=TRUE, na.action=na.omit)
print(ozone.rf)
#What about our concrete problem?
concreteRF <- randomForest(strength~., data=concreteData,
mtry=3,
importance=TRUE,
maxnodes=8)
print(concreteRF)
concreteRF <- randomForest(compressiveStrength~., data=concreteData,
mtry=3,
importance=TRUE,
maxnodes=8)
print(concreteRF)
?rxDForest
require(rxDForest)
